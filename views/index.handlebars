<main class='container text-center jumbotron'>
    <h1>Burger Builder</h1>
    <div style='margin: 20px 0px'>
        <input id='burgerName' type='text' placeholder='Add another burger'>
        <br>
        <br>
        <button id='createBurger' type='submit' class='btn btn-outline-dark'>Add to Ready list</button>
    </div>
    <div class='row text-center'>
        <div class='col-sm-6'>
            <h3 class='text-center'>Ready to be Eaten</h3>
            <ul>
                {{#each burgers}}
                    {{#unless Devoured}}
                        <div class='text-center'>
                            <p data={{ID}}>{{BurgerName}}</p>
                            <button type='submit' class='btn btn-outline-success readyButtons'>Eat</button>
                            <br>
                            <br>
                        </div>
                    {{/unless}}
                {{/each}}
            </ul>
        </div>
        <div class='col-sm-6'>
            <h3 class='text-center'>Eaten</h3>
            <ul>
                {{#each burgers}}
                    {{#if Devoured}}
                        <div class='text-center'>
                            <p data={{ID}}>{{BurgerName}}</p>
                            <br>
                            <br>
                        </div>
                    {{/if}}
                {{/each}}
            </ul>
        </div>
    </div>
</main>

<script>
    // Eat buttons
    // need a window onload function wrapping this script
    // need to get a node list of the buttons with class readyButtons
    // create an xmlhttprequest that will update (put) devoured status in database to true
    // loop through this node list and add an event listener click 
    // reload page


    
        const createButton = document.querySelector("#createBurger");
        createButton.addEventListener('click', addBurger);

        const eatButtons = document.querySelectorAll(".readyButtons");
        eatButtons.forEach( (button) => {
            button.addEventListener('click', devourBurger);
        });


        function addBurger() {
            const newBurgerName = document.querySelector("#burgerName").value.trim();
            console.log(newBurgerName);
            const data = {
                name: newBurgerName
            }
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/api/burgers', true);
            xhr.onload = function() {
                if (this.status === 200) {
                    console.log(this.responseText);
                }
            }
            xhr.setRequestHeader('Content-Type', 'application/json')
            xhr.send(JSON.stringify(data));
            location.reload();
        }

        function devourBurger() {
            // can probably refactor this
            const previousSib = this.previousElementSibling.childNodes[0].parentNode.attributes.data.nodeValue;
            console.log(this.previousElementSibling.childNodes[0].parentNode.attributes.data.nodeValue);
            const data = {
                burgerUpdateId: previousSib
            };
            const xhr = new XMLHttpRequest();
            xhr.open('PUT', '/api/burgers/update', true);
            xhr.onload = function() {
                if (this.status === 200) {
                    console.log(this.responseText)
                }
            }
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify(data));
            location.reload();  
        }
        
</script>


